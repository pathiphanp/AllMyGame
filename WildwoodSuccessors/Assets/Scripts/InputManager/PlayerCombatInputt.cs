//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputManager/PlayerCombatInputt.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerCombatInputt: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerCombatInputt()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerCombatInputt"",
    ""maps"": [
        {
            ""name"": ""CombatMode"",
            ""id"": ""7b2c98f7-09a5-4a1c-b530-bd919f82024d"",
            ""actions"": [
                {
                    ""name"": ""ElementFire"",
                    ""type"": ""Button"",
                    ""id"": ""a8d10c9b-6040-489d-aea2-e26706ac2191"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ElementWater"",
                    ""type"": ""Button"",
                    ""id"": ""0602c6ca-ea5d-4cc1-8c03-374949b9d033"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ElementWind"",
                    ""type"": ""Button"",
                    ""id"": ""f75a31ab-59ba-445c-96fb-13a35c47f73a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ElementEarth"",
                    ""type"": ""Button"",
                    ""id"": ""df40ef52-df6b-4de0-aa5b-7720b0b4c35e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ComboSkillLeft"",
                    ""type"": ""Button"",
                    ""id"": ""2229531e-f73f-4441-bbb5-1401f61e6766"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ComboSkillRight"",
                    ""type"": ""Button"",
                    ""id"": ""bb4ebcdf-df85-4024-a240-9b4b19890e4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeMode"",
                    ""type"": ""Button"",
                    ""id"": ""fcd08f22-124e-4230-ab93-8c6adf18f51a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2ff0187e-6904-429f-b0fd-200fae3cdb2a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ElementFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92c0134c-233a-4289-8f9a-56887e926f59"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ComboSkillLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28b5bec6-ebe2-44e8-b1df-5d200091303b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ElementWater"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18526667-12c0-4217-a8b1-e44faf7bd590"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ElementWind"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28f6dfb8-1c6b-48f5-8fde-c99ffefaa4c4"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ElementEarth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""211c6ab6-bae8-4895-86a8-abe3645c6c37"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ComboSkillRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e250f71a-bb19-43c7-a302-e83abf554801"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CombatMode
        m_CombatMode = asset.FindActionMap("CombatMode", throwIfNotFound: true);
        m_CombatMode_ElementFire = m_CombatMode.FindAction("ElementFire", throwIfNotFound: true);
        m_CombatMode_ElementWater = m_CombatMode.FindAction("ElementWater", throwIfNotFound: true);
        m_CombatMode_ElementWind = m_CombatMode.FindAction("ElementWind", throwIfNotFound: true);
        m_CombatMode_ElementEarth = m_CombatMode.FindAction("ElementEarth", throwIfNotFound: true);
        m_CombatMode_ComboSkillLeft = m_CombatMode.FindAction("ComboSkillLeft", throwIfNotFound: true);
        m_CombatMode_ComboSkillRight = m_CombatMode.FindAction("ComboSkillRight", throwIfNotFound: true);
        m_CombatMode_ChangeMode = m_CombatMode.FindAction("ChangeMode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CombatMode
    private readonly InputActionMap m_CombatMode;
    private List<ICombatModeActions> m_CombatModeActionsCallbackInterfaces = new List<ICombatModeActions>();
    private readonly InputAction m_CombatMode_ElementFire;
    private readonly InputAction m_CombatMode_ElementWater;
    private readonly InputAction m_CombatMode_ElementWind;
    private readonly InputAction m_CombatMode_ElementEarth;
    private readonly InputAction m_CombatMode_ComboSkillLeft;
    private readonly InputAction m_CombatMode_ComboSkillRight;
    private readonly InputAction m_CombatMode_ChangeMode;
    public struct CombatModeActions
    {
        private @PlayerCombatInputt m_Wrapper;
        public CombatModeActions(@PlayerCombatInputt wrapper) { m_Wrapper = wrapper; }
        public InputAction @ElementFire => m_Wrapper.m_CombatMode_ElementFire;
        public InputAction @ElementWater => m_Wrapper.m_CombatMode_ElementWater;
        public InputAction @ElementWind => m_Wrapper.m_CombatMode_ElementWind;
        public InputAction @ElementEarth => m_Wrapper.m_CombatMode_ElementEarth;
        public InputAction @ComboSkillLeft => m_Wrapper.m_CombatMode_ComboSkillLeft;
        public InputAction @ComboSkillRight => m_Wrapper.m_CombatMode_ComboSkillRight;
        public InputAction @ChangeMode => m_Wrapper.m_CombatMode_ChangeMode;
        public InputActionMap Get() { return m_Wrapper.m_CombatMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatModeActions set) { return set.Get(); }
        public void AddCallbacks(ICombatModeActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatModeActionsCallbackInterfaces.Add(instance);
            @ElementFire.started += instance.OnElementFire;
            @ElementFire.performed += instance.OnElementFire;
            @ElementFire.canceled += instance.OnElementFire;
            @ElementWater.started += instance.OnElementWater;
            @ElementWater.performed += instance.OnElementWater;
            @ElementWater.canceled += instance.OnElementWater;
            @ElementWind.started += instance.OnElementWind;
            @ElementWind.performed += instance.OnElementWind;
            @ElementWind.canceled += instance.OnElementWind;
            @ElementEarth.started += instance.OnElementEarth;
            @ElementEarth.performed += instance.OnElementEarth;
            @ElementEarth.canceled += instance.OnElementEarth;
            @ComboSkillLeft.started += instance.OnComboSkillLeft;
            @ComboSkillLeft.performed += instance.OnComboSkillLeft;
            @ComboSkillLeft.canceled += instance.OnComboSkillLeft;
            @ComboSkillRight.started += instance.OnComboSkillRight;
            @ComboSkillRight.performed += instance.OnComboSkillRight;
            @ComboSkillRight.canceled += instance.OnComboSkillRight;
            @ChangeMode.started += instance.OnChangeMode;
            @ChangeMode.performed += instance.OnChangeMode;
            @ChangeMode.canceled += instance.OnChangeMode;
        }

        private void UnregisterCallbacks(ICombatModeActions instance)
        {
            @ElementFire.started -= instance.OnElementFire;
            @ElementFire.performed -= instance.OnElementFire;
            @ElementFire.canceled -= instance.OnElementFire;
            @ElementWater.started -= instance.OnElementWater;
            @ElementWater.performed -= instance.OnElementWater;
            @ElementWater.canceled -= instance.OnElementWater;
            @ElementWind.started -= instance.OnElementWind;
            @ElementWind.performed -= instance.OnElementWind;
            @ElementWind.canceled -= instance.OnElementWind;
            @ElementEarth.started -= instance.OnElementEarth;
            @ElementEarth.performed -= instance.OnElementEarth;
            @ElementEarth.canceled -= instance.OnElementEarth;
            @ComboSkillLeft.started -= instance.OnComboSkillLeft;
            @ComboSkillLeft.performed -= instance.OnComboSkillLeft;
            @ComboSkillLeft.canceled -= instance.OnComboSkillLeft;
            @ComboSkillRight.started -= instance.OnComboSkillRight;
            @ComboSkillRight.performed -= instance.OnComboSkillRight;
            @ComboSkillRight.canceled -= instance.OnComboSkillRight;
            @ChangeMode.started -= instance.OnChangeMode;
            @ChangeMode.performed -= instance.OnChangeMode;
            @ChangeMode.canceled -= instance.OnChangeMode;
        }

        public void RemoveCallbacks(ICombatModeActions instance)
        {
            if (m_Wrapper.m_CombatModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatModeActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatModeActions @CombatMode => new CombatModeActions(this);
    public interface ICombatModeActions
    {
        void OnElementFire(InputAction.CallbackContext context);
        void OnElementWater(InputAction.CallbackContext context);
        void OnElementWind(InputAction.CallbackContext context);
        void OnElementEarth(InputAction.CallbackContext context);
        void OnComboSkillLeft(InputAction.CallbackContext context);
        void OnComboSkillRight(InputAction.CallbackContext context);
        void OnChangeMode(InputAction.CallbackContext context);
    }
}
